{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","activeCode","setActiveCode","codeArray","setCodeList","codes","setCodes","delay","setDelay","buttonEnabled","setButtonEnabled","activeI","setActiveI","stopInterval","clearInterval","window","countInterval","Container","Col","Row","style","padding","value","Button","variant","onClick","Form","Control","type","placeholder","onChange","e","target","index","setInterval","console","log","len","length","width","as","height","codeStr","arr","split","filter","v","formatCodes","ListGroup","map","code","i","Item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA0FeA,MArFf,WACE,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAiCF,mBAAS,IAA1C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA0BN,mBAAS,GAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAA0CR,oBAAS,GAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KACA,EAA8BV,mBAAS,IAAvC,mBAAOW,EAAP,KAAgBC,EAAhB,KA8BMC,EAAe,WACnBC,cAAcC,OAAOC,eACrBN,GAAiB,IAGnB,OACE,cAACO,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,qBAAKC,MAAO,CAAEC,QAAS,QAAvB,SACE,cAAC,IAAD,CAAQC,MAAOrB,MAEJ,KAAZU,EAAiB,GAAKA,EAAU,EAChCA,EAAU,GAAK,cAACY,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAMb,EAAW,KAApD,sBAElB,cAACO,EAAA,EAAD,UACE,cAACO,EAAA,EAAKC,QAAN,CACEC,KAAK,SACLC,YAAY,kBACZC,SAAU,SAAAC,GAAC,OAAIvB,EAASuB,EAAEC,OAAOV,QACjCA,MAAOf,MAGX,cAACY,EAAA,EAAD,UACGV,EACC,cAACc,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QA9CjB,WACjB,IAAIQ,EAAQtB,GAAW,EACvBC,EAAWqB,GACXvB,GAAiB,GACjBK,OAAOC,cAAgBkB,aAAY,WAKjC,GAJAC,QAAQC,IAAI,CAAEH,QAAOI,IAAKlC,EAAUmC,SACpCpC,EAAcC,EAAU8B,IAExBrB,EADAqB,GAAS,GAELA,GAAS9B,EAAUmC,OAGrB,OAFAzB,SACAD,EAAW,KAGRqB,EAAQ,GAAK,KAAO,GACvBpB,MAGO,IAARN,IA4BoDa,MAAO,CAAEmB,MAAO,QAA/D,iBAEA,cAAChB,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASZ,EAAcO,MAAO,CAAEmB,MAAO,QAAhE,oBAGJ,cAACpB,EAAA,EAAD,UACE,cAACO,EAAA,EAAKC,QAAN,CACEa,GAAG,WACHX,YAAY,QACZT,MAAO,CAAEqB,OAAQ,SACjBnB,MAAOjB,EACPyB,SAAU,SAAAC,GAAC,OAhED,SAACW,GACnBpC,EAASoC,GACT,IAAMC,EAAMD,EAAQE,MAAM,MAAMC,QAAO,SAAAC,GAAC,OAAIA,KAC5CX,QAAQC,IAAIO,GACZvC,EAAYuC,GA4DWI,CAAYhB,EAAEC,OAAOV,YAGxC,cAACH,EAAA,EAAD,UACE,cAAC6B,EAAA,EAAD,UACG7C,EAAU8C,KAAI,SAACC,EAAMC,GAAP,OAAc,cAACH,EAAA,EAAUI,KAAX,UAA0BF,GAALC,gBCtE/CE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5ff1baae.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Container, Button, Form, ListGroup, Col, Row } from 'react-bootstrap';\nimport QRcode from 'qrcode.react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [activeCode, setActiveCode] = useState(\"\");\n  const [codeArray, setCodeList] = useState([]);\n  const [codes, setCodes] = useState(\"\");\n  const [delay, setDelay] = useState(1);\n  const [buttonEnabled, setButtonEnabled] = useState(true);\n  const [activeI, setActiveI] = useState(\"\");\n\n  const formatCodes = (codeStr) => {\n    setCodes(codeStr);\n    const arr = codeStr.split(\"\\n\").filter(v => v);\n    console.log(arr);\n    setCodeList(arr);\n  }\n\n  const startCycle = () => {\n    let index = activeI || 0;\n    setActiveI(index);\n    setButtonEnabled(false);\n    window.countInterval = setInterval(() => {\n      console.log({ index, len: codeArray.length })\n      setActiveCode(codeArray[index]);\n      index += 1;\n      setActiveI(index);\n      if (index >= codeArray.length) {\n        stopInterval();\n        setActiveI(\"\");\n        return;\n      }\n      if ((index + 1) % 10 === 0) {\n        stopInterval();\n        return;\n      }\n    }, delay * 1000);\n  }\n\n  const stopInterval = () => {\n    clearInterval(window.countInterval);\n    setButtonEnabled(true);\n  }\n\n  return (\n    <Container >\n      <Col>\n        <Row>\n          <div style={{ padding: '1rem' }}>\n            <QRcode value={activeCode}></QRcode>\n          </div>\n          {activeI === \"\" ? \"\" : activeI + 1 }\n          {activeI > 0 && <Button variant=\"warning\" onClick={() => setActiveI(\"\")}>Reset</Button>}\n        </Row>\n        <Row>\n          <Form.Control\n            type=\"number\"\n            placeholder=\"Delay (seconds)\"\n            onChange={e => setDelay(e.target.value)}\n            value={delay}\n          />\n        </Row>\n        <Row>\n          {buttonEnabled ? (\n            <Button variant=\"primary\" onClick={startCycle} style={{ width: '100%' }}>Go!</Button>\n          ) : (\n            <Button variant=\"danger\" onClick={stopInterval} style={{ width: '100%' }}>Stop</Button>\n          )}\n        </Row>\n        <Row>\n          <Form.Control\n            as=\"textarea\"\n            placeholder=\"Codes\"\n            style={{ height: \"400px\" }}\n            value={codes}\n            onChange={e => formatCodes(e.target.value)}\n          />\n        </Row>\n        <Row>\n          <ListGroup>\n            {codeArray.map((code, i) => (<ListGroup.Item key={i} >{code}</ListGroup.Item>))}\n          </ListGroup>\n        </Row>\n      </Col>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}