{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","activeCode","setActiveCode","codeArray","setCodeList","codes","setCodes","delay","setDelay","activeI","setActiveI","Container","Col","Row","style","padding","value","Form","Control","type","placeholder","onChange","e","target","Button","variant","onClick","index","interval","setInterval","console","log","len","length","clearInterval","width","as","height","codeStr","arr","split","filter","v","formatCodes","ListGroup","map","code","i","Item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QA4EeA,MAvEf,WACE,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAiCF,mBAAS,IAA1C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA0BN,mBAAS,GAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAA0CR,oBAAS,GAAnD,mBACA,GADA,UAC8BA,mBAAS,KAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KA0BA,OACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACA,eAACC,EAAA,EAAD,WACE,qBAAKC,MAAO,CAACC,QAAQ,QAArB,SACA,cAAC,IAAD,CAAQC,MAAOf,MAEdQ,KAED,cAACI,EAAA,EAAD,UACE,cAACI,EAAA,EAAKC,QAAN,CACEC,KAAK,SACLC,YAAY,kBACZC,SAAU,SAAAC,GAAC,OAAId,EAASc,EAAEC,OAAOP,QACjCA,MAAOT,MAGX,cAACM,EAAA,EAAD,UACE,cAACW,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAnCf,WACjB,IAAIC,EAAQ,EACNC,EAAWC,aAAY,WAE3B,GADAC,QAAQC,IAAI,CAACJ,QAAOK,IAAK7B,EAAU8B,SAC/BN,GAASxB,EAAU8B,OAGrB,OAFAC,cAAcN,QACdlB,EAAW,IAGbA,EAAWiB,GACXzB,EAAcC,EAAUwB,IACxBA,GAAS,IAEA,IAARpB,IAsBkDO,MAAO,CAACqB,MAAM,QAA7D,mBAEF,cAACtB,EAAA,EAAD,UACI,cAACI,EAAA,EAAKC,QAAN,CACEkB,GAAG,WACHhB,YAAY,QACZN,MAAO,CAAEuB,OAAQ,SACjBrB,MAAOX,EACPgB,SAAU,SAAAC,GAAC,OAlDH,SAACgB,GACnBhC,EAASgC,GACT,IAAMC,EAAMD,EAAQE,MAAM,MAAMC,QAAO,SAAAC,GAAC,OAAIA,KAC5CZ,QAAQC,IAAIQ,GACZnC,EAAYmC,GA8CaI,CAAYrB,EAAEC,OAAOP,YAG1C,cAACH,EAAA,EAAD,UACE,cAAC+B,EAAA,EAAD,UACGzC,EAAU0C,KAAI,SAACC,EAAMC,GAAP,OAAc,cAACH,EAAA,EAAUI,KAAX,UAA0BF,GAALC,gBCxD/CE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c2ab104c.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { Container, Button, Form, ListGroup, Col, Row } from 'react-bootstrap';\nimport QRcode from 'qrcode.react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [activeCode, setActiveCode] = useState(\"\");\n  const [codeArray, setCodeList] = useState([]);\n  const [codes, setCodes] = useState(\"\");\n  const [delay, setDelay] = useState(1);\n  const [buttonEnabled, setButtonEnabled] = useState(true);\n  const [activeI, setActiveI] = useState(\"\");\n\n  const formatCodes = (codeStr) => {\n    setCodes(codeStr);\n    const arr = codeStr.split(\"\\n\").filter(v => v);\n    console.log(arr);\n    setCodeList(arr);\n  }\n\n  const startCycle = () => {\n    let index = 0;\n    const interval = setInterval(() => {\n      console.log({index, len: codeArray.length})\n      if (index >= codeArray.length) {\n        clearInterval(interval);\n        setActiveI(\"\");\n        return;\n      }\n      setActiveI(index);\n      setActiveCode(codeArray[index]);\n      index += 1;\n\n    }, delay * 1000);\n\n  }\n\n  return (\n    <Container >\n      <Col>\n      <Row>\n        <div style={{padding:'1rem'}}>\n        <QRcode value={activeCode}></QRcode>\n        </div>\n        {activeI}\n      </Row>\n        <Row>\n          <Form.Control\n            type=\"number\"\n            placeholder=\"Delay (seconds)\"\n            onChange={e => setDelay(e.target.value)}\n            value={delay}\n          />\n        </Row>\n        <Row>\n          <Button variant=\"primary\" onClick={startCycle} style={{width:'100%'}}>Go!</Button>\n        </Row>\n        <Row>\n            <Form.Control\n              as=\"textarea\"\n              placeholder=\"Codes\"\n              style={{ height: \"400px\" }}\n              value={codes}\n              onChange={e => formatCodes(e.target.value)}\n            />\n        </Row>\n        <Row>\n          <ListGroup>\n            {codeArray.map((code, i) => (<ListGroup.Item key={i} >{code}</ListGroup.Item>))}\n          </ListGroup>\n        </Row>\n      </Col>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}